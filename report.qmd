---
title: "FEH"
author: "Me"
format: html
editor: visual
---

```{r}
# Libraries ----
pacman::p_load(tidyverse, rvest, tidySEM, tictoc, FactoMineR, factoextra, sjPlot, lsa)

# Options ----
theme_set(theme_bw())

# Data ----
link <- "https://feheroes.fandom.com/wiki/Level_40_stats_table"

page <- read_html(link)

tab <- 
  page %>% 
  html_elements("table") %>% 
  html_table() %>% 
  .[[1]] %>% 
  janitor::clean_names() %>% 
  select(-x, -entry:-weapon)


tab$class <-
  page %>% 
  html_elements("tbody tr td:nth-child(5) img") %>% 
  html_attr("alt")
  
df <- 
  tab %>% 
  relocate(hero, class) %>% 
  rowid_to_column("id") %>% 
  separate(class, into = c("color", "weapon"), sep = " ", remove = FALSE)

saveRDS(df, file = "data/df.rds")
```

## Analyse LPA

Try to see how accurate is the Profile Latent analysis. Since there is 4 colors and 9 weapons (too much combinaison of both) we will test the latent class analyis and see how close the results are to the reality. But before, we need to see which of the color or the weapon is the best predictor for each variable.

```{r}
# Number of class (24) -> to much for a cluster analyis
df %>% 
  distinct(class) %>% 
  nrow()

# Number of color (4) -> good number
df %>% 
  distinct(color) %>% 
  nrow()

# Number of weapon (9) -> a bit to much but good for comparison
df %>% 
  distinct(weapon) %>% 
  nrow()
```

### Latent Profile Analysis

```{r}
res_lpa <- 
  df %>% 
  select(hp:res) %>% 
  mx_profiles(classes = c(4, 5, 9))

saveRDS(res_lpa, file = "data/lpa.rds")
```

#### Test avec 4 classes

Test with 4 classes

```{r}
res4 <- mx_switch_labels(res_lpa[[4]])
plot_bivariate(res4)
plot_profiles(res4)
```

Prediction and correctness

```{r}
p4 <- 
  predict(res4, newdata = select(df, hp:res)) %>% 
  as_tibble()

tab_color <- 
  df %>% 
  select(color) %>% 
  mutate(class = p4$predicted) %>% 
  janitor::tabyl(color, class)

# Visualy not clear cut for each category
tab_color

# Siginifcant but no clear cut between all category
janitor::chisq.test(tab_color)
```

#### Test avec 9 classes

Test with 9 classes

```{r}
res9 <- mx_switch_labels(res_lpa[[9]])
plot_bivariate(res9)
plot_profiles(res9)
```

Prediction and correctness

```{r}
p9 <- 
  predict(res9, newdata = select(df, hp:res)) %>% 
  as_tibble()

tab_weapon <- 
  df %>% 
  select(weapon) %>% 
  mutate(class = p9$predicted) %>% 
  janitor::tabyl(weapon, class)

# Visualy not clear cut for each category
tab_weapon

# Siginifcant but no clear cut between all category
janitor::chisq.test(tab_weapon)
```

#### Test with 5

```{r}
res5 <- mx_switch_labels(res_lpa[[5]])
plot_bivariate(res5)
plot_profiles(res5)
```

Prediction and correctness

```{r}
p5 <- 
  predict(res5, newdata = select(df, hp:res)) %>% 
  as_tibble()

tab_color <- 
  df %>% 
  select(color) %>% 
  mutate(class = p5$predicted) %>% 
  janitor::tabyl(color, class)

tab_weapon <- 
  df %>% 
  select(weapon) %>% 
  mutate(class = p5$predicted) %>% 
  janitor::tabyl(weapon, class)

# Visualy not clear cut for each category
tab_color
tab_weapon

# Siginifcant but no clear cut between all category
janitor::chisq.test(tab_color)
janitor::chisq.test(tab_weapon)
```

## Analyse HCPC

Now using PCA and HCPC to see if we can have closer result and can leverage tools like distance to center and to other points.

```{r}
res_pca <- 
  df %>% 
  select(hp:res) %>% 
  PCA(graph = FALSE)

# Didn't change much, each dimension is related to one variable more or less
  # Dim 1 to 3 capture most of the variation
res_pca$var$cor %>% 
  ggcorrplot::ggcorrplot()

# HCPC
res_hcpc <- HCPC(res_pca, nb.clust = -1, graph = FALSE)

# Prediction of the class
  # 4 classes: promising
df_hcpc <- 
  res_hcpc$data.clust %>% 
  mutate(color = df$color,
         weapon = df$weapon)
```

Correctness of the clusters

```{r}
# Color x cluster 
  # Except for red, no clear cut
(hcpc_color <- 
  df_hcpc %>% 
  janitor::tabyl(color, clust))

# Significiant
janitor::chisq.test(hcpc_color)

# Weapon x cluster
(hcpc_weapon <- 
  df_hcpc %>% 
  janitor::tabyl(weapon, clust))

# Significiant
janitor::chisq.test(hcpc_weapon)
```

Distance test

```{r}
# Description of the cluster by the variables
res_hcpc$desc.var

# Description of the cluster by the dimension
res_hcpc$desc.axes

# Description of the cluster by the individuals
  # Paragon: Most representative individuals of the cluster (closer to the center)
  # Dist: Less representative individuals of the cluster (farther to the center)
res_hcpc$desc.ind

# Get representative individual for each cluster
list_rep <- 
  map(res_hcpc$desc.ind$para, names) %>% 
  flatten_chr()

# Filter the representative members
df_hcpc %>% 
  filter(row_number() %in% list_rep) %>% 
  arrange(clust)
```

Distance entre les individus?

```{r}
# Info ind
res_pca$ind

# Ind coord
ind_coord <- res_pca$ind$coord

# Sim matrix
matrix_sim <- 
  ind_coord %>% 
  t() %>% 
  cosine()

# The 10 closest inds of ind 7
matrix_sim %>% 
  .[7,] %>% 
  sort(decreasing = T) %>% 
  .[1:10]

# Proximity between 7 and 77
cosine(ind_coord[7,], ind_coord[77,])

# Proximity between 7 and 10, 100 and 1000
matrix_sim %>% 
  .[7,] %>% 
  .[c(10, 100, 1000)]

# Similarit√© entre 7, 10, 50, 77, 92, 100
list_sim <- c(7, 10, 50, 77, 92, 100)

matrix_sim[list_sim, list_sim] %>% 
  corrplot::corrplot(order = "hclust", addrect = 3)
```
